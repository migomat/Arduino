#include <ESP8266WiFi.h>
#include <WiFiUdp.h>

#include <SPI.h> 
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Fonts/TomThumb.h>




const char* ssid = "local";
const char* password = "hujowapogoda";

WiFiUDP Udp;
unsigned int localUdpPort = 4210;  // local port to listen on
char incomingPacket[255];  // buffer for incoming packets
char  replyPacket[] = "Hi there! Got the message :-)";  // a reply string to send back


//----------LCD section MUST HAVE
#define OLED_RESET LED_BUILTIN  //4
Adafruit_SSD1306 display(OLED_RESET);
#define NUMFLAKES 1
#define XPOS 0
#define YPOS 1
#define DELTAY 2
#define LOGO16_GLCD_HEIGHT 32 
#define LOGO16_GLCD_WIDTH  128 
static const unsigned char PROGMEM logo16_glcd_bmp[] =
{   // 'adamski_logo4', 128x32px
 // 'adamski_logo4', 128x32px
0xff, 0xff, 0xff, 0x8f, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xfc, 0x03, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xf0, 0x21, 0xff, 0xff, 0xc1, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xe0, 0xf1, 0xc1, 0xff, 0x87, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xc1, 0xf0, 0x00, 0x3f, 0x0f, 0xe0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0x83, 0xf0, 0x00, 0x0f, 0x19, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0x87, 0xf8, 0x00, 0x06, 0x11, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0x0c, 0xf8, 0xff, 0x80, 0x30, 0xf1, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xfe, 0x18, 0x78, 0xff, 0xe0, 0x70, 0xf0, 0x0f, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xfe, 0x18, 0xf8, 0xff, 0xf0, 0x70, 0xf0, 0x8f, 0xf0, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xff, 
0xff, 0xfe, 0x38, 0xf8, 0xff, 0xf8, 0xf0, 0xf8, 0x87, 0xe0, 0x7f, 0xf8, 0x00, 0xff, 0xe7, 0xff, 
0xff, 0xfc, 0x38, 0xf8, 0xf1, 0xf8, 0x70, 0xf8, 0xc7, 0xe0, 0x7f, 0xf0, 0x00, 0xff, 0xc7, 0xff, 
0xff, 0xfc, 0x78, 0xf8, 0xf1, 0xfc, 0x79, 0xf8, 0xc3, 0xc0, 0x7f, 0xe0, 0x60, 0xff, 0xc7, 0xff, 
0xff, 0xfc, 0x78, 0xf8, 0xf1, 0xfc, 0x7f, 0xf8, 0xe0, 0x04, 0x7f, 0xe3, 0xf8, 0xe7, 0xff, 0xff, 
0xff, 0xf8, 0x79, 0xf8, 0xf1, 0xfc, 0x3f, 0xf8, 0xe0, 0x0c, 0x3f, 0xe3, 0xf8, 0x83, 0xff, 0xff, 
0xff, 0xf8, 0xff, 0xf8, 0xf1, 0xfc, 0x3f, 0xf8, 0xf8, 0x1c, 0x20, 0x23, 0xf8, 0x07, 0xbf, 0xff, 
0xff, 0xf8, 0xff, 0xf8, 0xf1, 0xfc, 0x3f, 0xf8, 0xfc, 0x7e, 0x20, 0x01, 0xf8, 0x0f, 0x1f, 0xff, 
0xff, 0xf0, 0xfb, 0xf8, 0xf1, 0xfc, 0x7f, 0xf8, 0x7f, 0xfe, 0x20, 0x30, 0xf8, 0x3e, 0x1f, 0xff, 
0xff, 0xf1, 0xf1, 0xf8, 0xe1, 0xfc, 0x7d, 0xf8, 0x7f, 0xfe, 0x1f, 0xf8, 0x70, 0x7e, 0x3f, 0xff, 
0xff, 0xf1, 0xf1, 0xf8, 0xe3, 0xf8, 0x78, 0xf8, 0x7f, 0xfe, 0x1f, 0xfc, 0x30, 0x7e, 0x3f, 0xff, 
0xff, 0xf1, 0xf1, 0xf8, 0xf3, 0xf0, 0xf8, 0xf8, 0x7f, 0xff, 0x1f, 0xfc, 0x30, 0x0e, 0x3f, 0xff, 
0xff, 0xf1, 0xf1, 0xf8, 0xff, 0xe1, 0xf8, 0xf8, 0x7f, 0xff, 0x1f, 0xfe, 0x00, 0x02, 0x1f, 0xff, 
0xff, 0xe1, 0xf1, 0xf0, 0xff, 0xc1, 0xf8, 0xf8, 0xf1, 0xff, 0x1f, 0xff, 0x00, 0x02, 0x1f, 0xff, 
0xff, 0xe3, 0xf1, 0xf0, 0xff, 0x03, 0xf0, 0xf8, 0xf1, 0xff, 0x0f, 0xff, 0x03, 0x87, 0xff, 0xff, 
0xff, 0xe3, 0xf1, 0xf1, 0xf8, 0x00, 0x00, 0xf0, 0xf0, 0xff, 0x0f, 0x00, 0x03, 0xff, 0xff, 0xff, 
0xff, 0xe3, 0xf1, 0xf1, 0x80, 0x00, 0x00, 0x01, 0xf0, 0xff, 0x0f, 0x00, 0x17, 0xff, 0xff, 0xff, 
0xff, 0xe3, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0xfe, 0x1f, 0x80, 0x7f, 0xff, 0xff, 0xff, 
0xff, 0xe0, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x03, 0xf0, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xe0, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xe0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,};

#if (SSD1306_LCDHEIGHT != 32)
#error("Height incorrect, please fix Adafruit_SSD1306.h!");
#endif


void setup()
{
 
  


  Serial.begin(115200);
  Serial.println();

  Serial.println();
  


  Serial.printf("Connecting to %s ", ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
  }
  Serial.println(" connected");

  Udp.begin(localUdpPort);
  Serial.printf("Now listening at IP %s, UDP port %d\n", WiFi.localIP().toString().c_str(), localUdpPort);

//----------LCD section 
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.display();
  display.clearDisplay();
  display.drawBitmap(0, 0,  logo16_glcd_bmp, 128, 32, 1);
  display.display();
  delay(2000);
  display.clearDisplay();
  //display.setFont(&TomThumb);
  display.setTextColor(WHITE);
  display.setCursor(0,5);
  display.println("Mietek");
  display.display();
  delay(1000);
  display.clearDisplay();
  


}


void loop()
{
  int packetSize = Udp.parsePacket();
  if (packetSize)
  {
    // receive incoming UDP packets
    Serial.printf("Received %d bytes from %s, port %d\n", packetSize, Udp.remoteIP().toString().c_str(), Udp.remotePort());
    int len = Udp.read(incomingPacket, 255);
    if (len > 0)
    {
      incomingPacket[len] = 0;
    }
    Serial.printf("UDP packet contents: %s\n", incomingPacket);
    
    //commandExecute(incomingPacket);
    displayPrint(incomingPacket);
    // send back a reply, to the IP address and port we got the packet from
    //Udp.beginPacket(Udp.remoteIP(), Udp.remotePort());
    //Udp.write(replyPacket);
    //Udp.endPacket();

  }

}


void displayPrint(String text){
    display.clearDisplay();
    //ckdisplay.setFont(&TomThumb);
    display.setTextSize(2);
    display.setTextColor(WHITE);
    display.setCursor(0,0);
    display.println(text);
    display.display();
    delay(1000);
  }


